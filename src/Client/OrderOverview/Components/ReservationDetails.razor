@*@using Blanche.Shared.Formulas;
@using Blanche.Shared.Reservations;
@using Blanche.Shared.Products;
@using MudBlazor;
@using System.Text.Json;
@inject HttpClient HttpClient
@inject IJSRuntime js


<MudContainer Class="mt-5 justify-center">

    <MudText Typo="Typo.h5" GutterBottom="true">Overzicht aanvraag</MudText>

    <div class="mt-auto">

        <MudDivider />
        <div class="d-flex pa-4">
            <MudText Class="">Formule: </MudText>
            <MudText Class="ml-auto"><b>@Order.Formula.Name</b></MudText>
            <MudText Class="ml-auto"><b>@string.Format("{0:F2}", Order.Formula.Price)</b></MudText>
            <MudIcon Icon=@Icons.Material.Filled.EuroSymbol></MudIcon>
        </div>

        @if (@Order.ReservationLines.Any())
        {
            <MudList Clickable="true">
                <MudListItem Text="Extra's: " InitiallyExpanded="false">
                    <NestedList>
                        @foreach (ReservationLineDTO orderline in @Order.ReservationLines)
                        {
                            <MudListItem>
                                <div class="d-flex">
                                    <MudText>@orderline.Product.Name</MudText>
                                    <MudText Class="ml-auto">@orderline.Product.Description</MudText>
                                    <MudText Inline="true" Class="ml-auto">
                                        @string.Format("{0:F2}", orderline.GetPrice())
                                    </MudText>
                                    <MudIcon Icon=@Icons.Material.Filled.EuroSymbol></MudIcon>
                                    <MudItem Class="ml-auto" Clickable="true" @onclick="_ => RemoveLine(orderline)">
                                        <MudIcon Icon="@Icons.Material.Filled.DeleteForever" />
                                    </MudItem>
                                </div>

                            </MudListItem>
                        }
                    </NestedList>
                </MudListItem>
            </MudList>

        }
        else
        {
            <div class="d-flex pa-4">
                <MudText Class="">Extra's: </MudText>
                <MudText Class="ml-auto"><b>Geen Extra's</b></MudText>
            </div>
        }

        <MudDivider DividerType="DividerType.Inset" Light=false Style="color:black" />
        <div class="d-flex pa-4">
            <MudText Class=""><b>Total:</b></MudText>
            <MudText Class="ml-auto"><b>@string.Format("{0:F2}", Order.TotalPrice)</b></MudText>
            <MudIcon Icon=@Icons.Material.Filled.EuroSymbol></MudIcon>
        </div>
        <div class="d-flex pa-4">
            <MudText Class="">BTW:</MudText>
            <MudText Class="ml-auto"><b>21%</b></MudText>
        </div>
        <div class="d-flex pa-4">
            <MudText Class="">ex. BTW:</MudText>
            <MudText Class="ml-auto"><b>@string.Format("{0:F2}", Order.SubTotal)</b></MudText>
            <MudIcon Icon=@Icons.Material.Filled.EuroSymbol></MudIcon>
        </div>

    </div>

    

</MudContainer>

@code {

    private const string endpoint = "api/customer";
    private CustomerOrderDTO Order = new();
    private void NotifyCartChanged() => OnOverviewChanged?.Invoke();

    public event Action? OnOverviewChanged;

    protected override async Task OnInitializedAsync(){
        var customerId = 1;
        await GetCustomerOrderAsync(customerId);
    }


    public void RequestInquiry()
    {
        // TODO:
    }

    public async Task<CustomerOrderDTO> GetCustomerOrderAsync(int customerId)
    {

        var model = new CustomerOrderDTO();
        string json = JsonSerializer.Serialize<CustomerOrderDTO>(model);
        await js.InvokeVoidAsync("localStorage.setItem", "mydata", json);

        json = await js.InvokeAsync<string>("localStorage.getItem", "mydata");
        model = JsonSerializer.Deserialize<CustomerOrderDTO>(json) ?? new();
        Console.WriteLine(json);

        //var response = await HttpClient.GetFromJsonAsync<CustomerOrderDTO>($"{endpoint}/{customerId}/reservation");
        return model;
    }

    public void RemoveLine(ReservationLineDTO line)
    {
        Order.ReservationLines.Remove(line);
        NotifyCartChanged();
    }
}*@
